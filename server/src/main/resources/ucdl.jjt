PARSER_BEGIN(SyntaxChecker)
package de.uftos.repositories.ucdl.parser.javacc;

import java.io.Reader;
import java.io.StringReader;

public class SyntaxChecker {
  static final public SimpleNode parseString(String string) throws ParseException {
    Reader reader = new StringReader(string);
    SyntaxChecker t = new SyntaxChecker(reader);
    return t.START();
  }
}


PARSER_END(SyntaxChecker)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN: { <LPAREN: "("> | <RPAREN: ")"> | <LBRACE: "{"> | <RBRACE: "}"> | <LBRACKET: "["> | <RBRACKET: "]"> | <COMMA: ","> | <FLATMAP: "."> }
TOKEN: { <OF: "of" | ":"> | <AND: "and" | "&&"> | <OR: "or" | "||"> | <NOT: "not" | "!"> | <IMPLIES: "implies" | "->"> | <IN: "in"> }
TOKEN: { <EQUALS: "=="> | <NOTEQUALS: "!="> | <SMALLEREQUALS: "<="> | <GREATEREQUALS: ">="> | <SMALLER: "<"> | <GREATER: ">"> }
TOKEN: { <TRUE: "true"> | <FALSE: "false"> | <THIS: "this"> | <FORALL: "forall"> | <EXISTS: "exists"> | <FOR: "for"> | <IF: "if">  }
TOKEN: { <RETURN: "return"> | <ISEMPTY: "isEmpty"> | <SIZE: "size"> }
TOKEN: { <ELEMENTATTRIBUTE: "grade" | "day" | "slot" | "studentGroup" | "index" | "teacher" | "room" | "timeslot" | "subject" > }
TOKEN: { <SETATTRIBUTE: "students" | "studentGroups" | "tags" | "subjects" | "lessons" | "teachers" | "rooms" | "grades" | "timeslots" > }
//values need to be matched last
TOKEN: { <NUM: (["0"-"9"])+> | <STRING: (["a"-"z"] | ["A" - "Z"])+ (["a"-"z"] | ["A" - "Z"] | ["0"-"9"])*> }

SimpleNode START(): {} {DEFINITION() <EOF> { return jjtThis; }}
void DEFINITION(): {} { IMPLIES() | CODEBLOCK() }
void BOOLVALUE(): {} { <TRUE> | <FALSE> }
void CODEBLOCK(): {} { CONTROLSEQUENCE_LIST() RETURN() }
void CONTROLSEQUENCE_LIST(): {} { CONTROLSEQUENCE() CONTROLSEQUENCE_LIST() | {} }
void CONTROLSEQUENCE(): {} {IF() | FOR() }
void RETURN(): {} { <RETURN> BOOLVALUE() }

void FOR(): {} { <FOR> <LPAREN> VALUE_REFERENCE() <OF> SET() <RPAREN> <LBRACE> CONTROLSEQUENCE() CONTROLSEQUENCE_LIST() <RBRACE> }
void IF(): {} { <IF> <LPAREN> IMPLIES() <RPAREN> <LBRACE> CONTROLSEQUENCE_RETURN() <RBRACE> }
void CONTROLSEQUENCE_RETURN(): {} { CONTROLSEQUENCE() CONTROLSEQUENCE_LIST() | RETURN() }

void FOR_ALL(): {} { <FORALL> <LPAREN> VALUE_REFERENCE() <OF> SET() <RPAREN> <LBRACE> DEFINITION() <RBRACE> }
void EXISTS(): {} { <EXISTS> <LPAREN> VALUE_REFERENCE() <OF> SET() <RPAREN> <LBRACE> DEFINITION() <RBRACE> }
void IMPLIES(): {} { OR() OPTIONAL_IMPLIES() }
void OPTIONAL_IMPLIES(): {} { <IMPLIES> OR() | {} }
void OR(): {} { AND() OPTIONAL_OR() }
void OPTIONAL_OR(): {} { <OR> OR() | {} }
void AND(): {} { NOT() OPTIONAL_AND() }
void OPTIONAL_AND(): {} { <AND> AND() | {} }
void NOT(): {} { BOOL() | <LPAREN> IMPLIES() <RPAREN> | <NOT> ( <LPAREN> IMPLIES() <RPAREN> | BOOL() ) }
void IS_EMPTY(): {} { <ISEMPTY> <LPAREN> SET() <RPAREN> }
void BOOL(): {} { BOOLVALUE() | FOR_ALL() | EXISTS() | IS_EMPTY() | ELEMENT_IN_SET_OR_EQUATION() }

void ELEMENT_IN_SET_OR_EQUATION(): {} { ELEMENT() ( ELEMENT_IN_SET() | EQUATION() ) }
void ELEMENT_IN_SET(): {} { <IN> SET() }

void EQUATION(): {} {  ELEMENT_EQUATION() ELEMENT() }
void ELEMENT_EQUATION(): {} { <SMALLER> | <SMALLEREQUALS> | <GREATER> | <GREATEREQUALS> | <EQUALS> | <NOTEQUALS> }

void ELEMENT(): {} { ELEMENT_NAME() ELEMENT_ATTRIBUTE_LIST() | NUMBERELEMENT() }
void ELEMENT_NAME(): {} { <THIS> | VALUE_REFERENCE() }
void ELEMENT_ATTRIBUTE_LIST(): {} { <FLATMAP> <ELEMENTATTRIBUTE> ELEMENT_ATTRIBUTE_LIST() | {} }
void NUMBERELEMENT(): {} { <NUM> | <SIZE> <LPAREN> SET() <RPAREN> }

void SET(): {} { SET_NAME() SET_MODIFICATION() }
void SET_NAME(): {} { ELEMENT() | NUMBER_SET() }
void SET_MODIFICATION(): {} { <FLATMAP> ATTRIBUTE() SET_MODIFICATION() | <LBRACKET> FILTER() FILTER_LIST() <RBRACKET> SET_MODIFICATION() | {} }

void NUMBER_SET(): {} { <LBRACKET> <NUM> NUMBER_LIST() <RBRACKET> }
void NUMBER_LIST(): {} { <COMMA> <NUM> NUMBER_LIST() | {} }

void ATTRIBUTE(): {} { <ELEMENTATTRIBUTE> | <SETATTRIBUTE> }

void VALUE_REFERENCE(): {} { <STRING> | <ELEMENTATTRIBUTE> | <SETATTRIBUTE> }

void FILTER(): {} { NUMBER_SET() SET_MODIFICATION() | BOOLVALUE() | FOR_ALL() | EXISTS() | IS_EMPTY() |
 ELEMENT() (( ELEMENT_IN_SET() | EQUATION() ) ( (<IMPLIES> OR()) | <OR> OR() | <AND> AND() | {} ) | SET_MODIFICATION() )}
void FILTER_LIST(): {} { <COMMA> FILTER() FILTER_LIST() | {} }
