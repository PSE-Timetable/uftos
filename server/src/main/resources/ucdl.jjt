PARSER_BEGIN(SyntaxChecker)

public class SyntaxChecker {
  static final public SimpleNode parseString(String string) {
    Reader reader = new StringReader(string);
    SyntaxChecker t = new SyntaxChecker(reader);
    try {
      return t.START();
    } catch (ParseException e) {
      throw new RuntimeException(e);
    }
  }
}

PARSER_END(SyntaxChecker)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN: { <LPAREN: "("> | <RPAREN: ")"> | <LBRACE: "{"> | <RBRACE: "}"> | <LBRACKET: "["> | <RBRACKET: "]"> | <COMMA: ","> | <FLATMAP: "."> }
TOKEN: { <OF: "of" | ":"> | <AND: "and" | "&&"> | <OR: "or" | "||"> | <NOT: "not" | "!"> | <IMPLIES: "implies" | "->"> | <IN: "in"> }
TOKEN: { <EQUALS: "==" | "="> | <NOTEQUALS: "!="> | <SMALLEREQUALS: "<="> | <GREATEREQUALS: ">="> | <SMALLER: "<"> | <GREATER: ">"> }
TOKEN: { <TRUE: "true"> | <FALSE: "false"> | <THIS: "this"> | <FORALL: "forall"> | <EXISTS: "exists"> | <FOR: "for"> | <IF: "if">  }
TOKEN: { <RETURN: "return"> | <ISEMPTY: "isEmpty"> | <SIZE: "size"> }
TOKEN: { <ELEMENTATTRIBUTE: "grade" | "day" | "slot" | "studentGroup" | "index" | "teacher" | "room" | "timeslot" | "subject" > }
TOKEN: { <SETATTRIBUTE: "students" | "studentGroups" | "tags" | "subjects" | "lessons" | "teachers" | "rooms" | "grades" | "timeslots" > }
//values need to be matched last
TOKEN: { <NUM: (["0"-"9"])+> | <STRING: (["a"-"z"] | ["A" - "Z"])+ (["a"-"z"] | ["A" - "Z"] | ["0"-"9"])*> }

SimpleNode START(): {} {DEFINITION() <EOF> { return jjtThis; }}
void DEFINITION(): {} { BOOL() | CODEBLOCK() }
void BOOL(): {} { FORALL() | EXISTS() | ISEMPTY() | IMPLIES() }
void BOOLVALUE(): {} { <TRUE> | <FALSE> }
void CODEBLOCK(): {} { CONTROLSEQUENCELIST() RETURN() }
void CONTROLSEQUENCELIST(): {} { CONTROLSEQUENCE() CONTROLSEQUENCELIST() | {} }
void CONTROLSEQUENCE(): {} {IF() | FOR() }
void RETURN(): {} { <RETURN> BOOLVALUE() }

void FOR(): {} { <FOR> <LPAREN> VALUEREFERENCE() <OF> SET() <RPAREN> <LBRACE> CONTROLSEQUENCE() CONTROLSEQUENCELIST() <RBRACE> }
void IF(): {} { <IF> <LPAREN> BOOL() <RPAREN> <LBRACE> CONTROLSEQUENCERETURN() <RBRACE> }
void CONTROLSEQUENCERETURN(): {} { CONTROLSEQUENCE() CONTROLSEQUENCELIST() | RETURN() }

void FORALL(): {} { <FORALL> <LPAREN> VALUEREFERENCE() <OF> SET() <RPAREN> <LBRACE> DEFINITION() <RBRACE> }
void EXISTS(): {} { <EXISTS> <LPAREN> VALUEREFERENCE() <OF> SET() <RPAREN> <LBRACE> DEFINITION() <RBRACE> }
void IMPLIES(): {} { OR() OPTIONALIMPLIES() }
void OPTIONALIMPLIES(): {} { <IMPLIES> OR() | {} }
void OR(): {} { AND() OPTIONALOR() }
void OPTIONALOR(): {} { <OR> OR() | {} }
void AND(): {} { NOT() OPTIONALAND() }
void OPTIONALAND(): {} { <AND> AND() | {} }
void NOT(): {} { BOOLVALUE() | ELEMENTINSETOREQUATION() | <LPAREN> BOOL() <RPAREN> | <NOT> ( <LPAREN> BOOL() <RPAREN> | BOOLVALUE() | ELEMENTINSETOREQUATION() ) }
void ISEMPTY(): {} { <ISEMPTY> <LPAREN> SET() <RPAREN> }

void ELEMENTINSETOREQUATION(): {} { ELEMENT() ( ELEMENTINSET() | EQUATION() ) }
void ELEMENTINSET(): {} { <IN> SET() }

void EQUATION(): {} {  ELEMENTEQUATION() ELEMENT() }
void ELEMENTEQUATION(): {} { <SMALLER> | <SMALLEREQUALS> | <GREATER> | <GREATEREQUALS> | <EQUALS> | <NOTEQUALS> }

void ELEMENT(): {} { ELEMENTNAME() ELEMENTATTRIBUTELIST() | NUMBERELEMENT() }
void ELEMENTNAME(): {} { <THIS> | VALUEREFERENCE() }
void ELEMENTATTRIBUTELIST(): {} { <FLATMAP> <ELEMENTATTRIBUTE> ELEMENTATTRIBUTELIST() | {} }
void NUMBERELEMENT(): {} { <NUM> | <SIZE> <LPAREN> SET() <RPAREN> }

void SET(): {} { SETNAME() SETMODIFICATION() }
void SETNAME(): {} { ELEMENT() | NUMBERSET() }
void SETMODIFICATION(): {} { <FLATMAP> ATTRIBUTE() SETMODIFICATION() | <LBRACKET> FILTER() FILTERLIST() <RBRACKET> SETMODIFICATION() | {} }

void NUMBERSET(): {} { <LBRACKET> <NUM> NUMBERLIST() <RBRACKET> }
void NUMBERLIST(): {} { <COMMA> <NUM> NUMBERLIST() | {} }

void ATTRIBUTE(): {} { <ELEMENTATTRIBUTE> | <SETATTRIBUTE> }

void VALUEREFERENCE(): {} { <STRING> | <ELEMENTATTRIBUTE> | <SETATTRIBUTE> }

void FILTER(): {} { NUMBERSET() SETMODIFICATION() | BOOLVALUE() | FORALL() | EXISTS() | ISEMPTY() |
 ELEMENT() (( ELEMENTINSET() | EQUATION() ) ( (<IMPLIES> OR()) | <OR> OR() | <AND> AND() | {} ) | SETMODIFICATION() )}
void FILTERLIST(): {} { <COMMA> FILTER() FILTERLIST() | {} }
