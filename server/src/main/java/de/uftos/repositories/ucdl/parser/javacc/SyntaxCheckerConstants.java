/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxCheckerConstants.java */

package de.uftos.repositories.ucdl.parser.javacc;

@SuppressWarnings("all")


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxCheckerConstants {

  /**
   * End of File.
   */
  int EOF = 0;
  /**
   * RegularExpression Id.
   */
  int LPAREN = 5;
  /**
   * RegularExpression Id.
   */
  int RPAREN = 6;
  /**
   * RegularExpression Id.
   */
  int LBRACE = 7;
  /**
   * RegularExpression Id.
   */
  int RBRACE = 8;
  /**
   * RegularExpression Id.
   */
  int LBRACKET = 9;
  /**
   * RegularExpression Id.
   */
  int RBRACKET = 10;
  /**
   * RegularExpression Id.
   */
  int COMMA = 11;
  /**
   * RegularExpression Id.
   */
  int FLATMAP = 12;
  /**
   * RegularExpression Id.
   */
  int OF = 13;
  /**
   * RegularExpression Id.
   */
  int AND = 14;
  /**
   * RegularExpression Id.
   */
  int OR = 15;
  /**
   * RegularExpression Id.
   */
  int NOT = 16;
  /**
   * RegularExpression Id.
   */
  int IMPLIES = 17;
  /**
   * RegularExpression Id.
   */
  int IN = 18;
  /**
   * RegularExpression Id.
   */
  int EQUALS = 19;
  /**
   * RegularExpression Id.
   */
  int NOTEQUALS = 20;
  /**
   * RegularExpression Id.
   */
  int SMALLEREQUALS = 21;
  /**
   * RegularExpression Id.
   */
  int GREATEREQUALS = 22;
  /**
   * RegularExpression Id.
   */
  int SMALLER = 23;
  /**
   * RegularExpression Id.
   */
  int GREATER = 24;
  /**
   * RegularExpression Id.
   */
  int TRUE = 25;
  /**
   * RegularExpression Id.
   */
  int FALSE = 26;
  /**
   * RegularExpression Id.
   */
  int THIS = 27;
  /**
   * RegularExpression Id.
   */
  int FORALL = 28;
  /**
   * RegularExpression Id.
   */
  int EXISTS = 29;
  /**
   * RegularExpression Id.
   */
  int FOR = 30;
  /**
   * RegularExpression Id.
   */
  int IF = 31;
  /**
   * RegularExpression Id.
   */
  int RETURN = 32;
  /**
   * RegularExpression Id.
   */
  int ISEMPTY = 33;
  /**
   * RegularExpression Id.
   */
  int SIZE = 34;
  /**
   * RegularExpression Id.
   */
  int ELEMENTATTRIBUTE = 35;
  /**
   * RegularExpression Id.
   */
  int SETATTRIBUTE = 36;
  /**
   * RegularExpression Id.
   */
  int NUM = 37;
  /**
   * RegularExpression Id.
   */
  int STRING = 38;

  /**
   * Lexical state.
   */
  int DEFAULT = 0;

  /**
   * Literal token values.
   */
  String[] tokenImage = {
      "<EOF>",
      "\" \"",
      "\"\\t\"",
      "\"\\n\"",
      "\"\\r\"",
      "\"(\"",
      "\")\"",
      "\"{\"",
      "\"}\"",
      "\"[\"",
      "\"]\"",
      "\",\"",
      "\".\"",
      "<OF>",
      "<AND>",
      "<OR>",
      "<NOT>",
      "<IMPLIES>",
      "\"in\"",
      "<EQUALS>",
      "\"!=\"",
      "\"<=\"",
      "\">=\"",
      "\"<\"",
      "\">\"",
      "\"true\"",
      "\"false\"",
      "\"this\"",
      "\"forall\"",
      "\"exists\"",
      "\"for\"",
      "\"if\"",
      "\"return\"",
      "\"isEmpty\"",
      "\"size\"",
      "<ELEMENTATTRIBUTE>",
      "<SETATTRIBUTE>",
      "<NUM>",
      "<STRING>",
  };

}
