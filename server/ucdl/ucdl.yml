
studentTeacherTag:
  description: "Student {student} requires Tag {tag} from their Teachers"
  default_type: SOFT_PENALIZE
  parameter:
    student: Student
    tag: Tag
  definition: >-
    for (teacher of student.studentGroups.lessons.teacher) {
      if (!tag in teacher.tags) {
        return true
      }
    }
    return false
avoidTeacherCollision:
  description: "Teachers may not have multiple lessons at the same time"
  default_type: HARD_PENALIZE
  parameter:
  definition: >-
    for (teacher of this.teachers) {
      for (lesson1 of teacher.lessons) {
        for (lesson2 of teacher.lessons) {
          if (lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot) {
            return true
          }
        }
      }
    }
    return false
teacherTeachesDuringTimeslot:
  description: "Teacher {teacher} does work during Timeslot {timeslot}"
  default_type: SOFT_PENALIZE
  parameter:
    teacher: Teacher
    timeslot: Timeslot
  definition: >-
    if (timeslot in teacher.lessons.timeslot) {
      return true
    }
    return false