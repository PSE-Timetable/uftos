newConstraint:
  description: "Ein neuer Constraint, der immer zu false auswertet."
  default_type: HARD_PENALIZE
  parameter:
  definition: >-
    if (false) {
      return true
    }
    return false

teacherCollision:
  description: "Lehrer {teacher} kann nicht mehrere Unterrichtseinheiten zeitgleich unterrichten."
  default_type: HARD_PENALIZE
  parameter:
    teacher: Teacher
  definition: >-
    exists (lesson1 : teacher.lessons) {
      exists (lesson2 : teacher.lessons) {
        lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot && lesson1.teacher == lesson2.teacher
      }
    }

studentCollision:
  description: "Schüler {student} kann nicht an mehreren Unterrichtseinheiten zeitgleich teilnehmen."
  default_type: HARD_PENALIZE
  parameter:
    student: Student
  definition: >-
    exists (lesson1 : student.studentGroups.lessons) {
      exists (lesson2 : student.studentGroups.lessons) {
        lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot && lesson1.teacher == lesson2.teacher
      }
    }

roomCollision:
  description: "In Raum {room} können nicht mehrere Unterrichtseinheiten zeitgleich unterrichtet werden."
  default_type: HARD_PENALIZE
  parameter:
    room: Room
  definition: >-
    exists (lesson1 : room.lessons) {
      exists (lesson2 : room.lessons) {
        lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot && lesson1.teacher == lesson2.teacher
      }
    }

workingHours:
  description: "Lehrer {teacher} arbeitet zum Zeitpunkt {timeslot}."
  default_type: SOFT_PENALIZE
  parameter:
    teacher: Teacher
    timeslot: Timeslot
  definition: >-
    if (timeslot in teacher.lessons.timeslot) {
      return true
    }
    return false

teacherTeachesGroup:
  description: "Lehrer {teacher} unterrichtet Schülergruppe {group} in Fach {subject}."
  default_type: SOFT_PENALIZE
  parameter:
    teacher: Teacher
    group: Student-Group
    subject: Subject
  definition: >-
    forall (lesson : group.lessons[this.subject == subject]) {
      lesson.teacher == teacher
    }

subjectRoom:
  description: "Fach {subject} kann nur in Räumen mit Tag {tag} unterrichtet werden."
  default_type: SOFT_PENALIZE
  parameter:
    subject: Subject
    tag: Tag
  definition: >-
    forall (room : subject.lessons.room) {
      tag in room.tags
    }
