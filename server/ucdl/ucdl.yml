teacherCollision:
  description: "Teachers may not have multiple lessons at the same time."
  default_type: HARD_PENALIZE
  parameter:
  definition: >-
    for (teacher of this.teachers) {
      for (lesson1 of teacher.lessons) {
        for (lesson2 of teacher.lessons) {
          if (lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot) {
            return true
          }
        }
      }
    }
    return false
studentCollision:
  description: "Students may not have multiple lessons at the same time."
  default_type: HARD_PENALIZE
  parameter:
  definition: >-
    for (student of this.students) {
      for (lesson1 of student.studentGroups.lessons) {
        for (lesson2 of student.studentGroups.lessons) {
          if (lesson1 != lesson2 && lesson1.timeslot == lesson2.timeslot) {
            return true
          }
        }
      }
    }
    return false
roomCollision:
  description: "Rooms may not be occupied by multiple lessons at the same time."
  default_type: HARD_PENALIZE
  parameter:
  definition: >-
    forall(room : this.rooms) {
      exists(lesson1 : room.lessons) {
        forall(lesson2 : room.lessons) {
          lesson1 != lesson2 implies lesson1.timeslot != lesson2.timeslot
        }
      }
    }
workingHours:
  description: "Teacher {teacher} does work during Timeslot {timeslot}."
  default_type: SOFT_PENALIZE
  parameter:
    teacher: Teacher
    timeslot: Timeslot
  definition: >-
    if (timeslot in teacher.lessons.timeslot) {
      return true
    }
    return false
teacherTeachesGroup:
  description: "Teacher {teacher} teaches student group {group} in subject {subject}."
  default_type: SOFT_PENALIZE
  parameter:
    teacher: Teacher
    group: Student-Group
    subject: Subject
  definition: >-
    forall (lesson : group.lessons[this.subject == subject]) {
      lesson.teacher == teacher
    }
subjectRoom:
  description: "Subject {subject} is only taught in rooms with tag {tag}."
  default_type: SOFT_PENALIZE
  parameter:
    subject: Subject
    tag: Tag
  definition: >-
    forall (room : subject.lessons.room) {
      tag in room.tags
    }
